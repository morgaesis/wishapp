name: Infrastructure CI/CD

# Workflow triggers (yamllint disable rule:truthy for GitHub Actions syntax)
on:
  push:
    branches: ["main"]
    paths: ["infra/**"]
  pull_request:
    types: ["opened", "synchronize", "reopened"]
    paths: ["infra/**"]
  pull_request_target:
    types: ["closed"]
    paths: ["infra/**"]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Different AWS accounts for isolation
  PR_AWS_ACCOUNT_ID: ${{ secrets.PR_AWS_ACCOUNT_ID }}
  PROD_AWS_ACCOUNT_ID: ${{ secrets.PROD_AWS_ACCOUNT_ID }}
  # Shared role name across accounts
  DEPLOYMENT_ROLE_NAME: github-action

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      aws-creds: ${{ steps.assume-role.outputs.aws-creds }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        id: assume-role
        with:
          role-to-assume: arn:aws:iam::${{ github.event_name == 'pull_request' && env.PR_AWS_ACCOUNT_ID || env.PROD_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          role-session-name: ${{ github.event_name == 'pull_request' && format('github-pr-{0}', github.event.number) || 'github-prod-deploy' }}
          aws-region: ${{ env.AWS_REGION }}
      - id: set-outputs
        run: |
          echo "aws-creds=$(jq -n \
            --arg access_key_id \"$AWS_ACCESS_KEY_ID\" \
            --arg secret_access_key \"$AWS_SECRET_ACCESS_KEY\" \
            --arg session_token \"$AWS_SESSION_TOKEN\" \
            '{access_key_id: $access_key_id, secret_access_key: $secret_access_key, session_token: $session_token}' | base64)" >> $GITHUB_OUTPUT
  jobs:
  deploy:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ fromJSON(base64decode(needs.setup.outputs.aws-creds)).access_key_id }}
          aws-secret-access-key: ${{ fromJSON(base64decode(needs.setup.outputs.aws-creds)).secret_access_key }}
          aws-session-token: ${{ fromJSON(base64decode(needs.setup.outputs.aws-creds)).session_token }}
          aws-region: ${{ env.AWS_REGION }}
      - name: CDK Deploy
        run: |
          cd infra
          npm ci
          npx cdk deploy --require-approval never --exclusively
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Zig toolchain
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.13.0

      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
          platform: linux
          arch: x86_64

      - name: Build lambda
        run: cargo lambda build --release --output-format zip

      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: cd infra && npm install
      - run: cd infra && npm test

      # PR Preview Environment
      - if: github.event_name == 'pull_request'
        name: Deploy Preview
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.PR_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-pr-${{ github.event.number }}
      - if: github.event_name == 'pull_request'
        run: |
          cd infra && npx cdk deploy \
            --require-approval never \
            --exclusively \
            -c stage=pr-${{ github.event.number }} \
            --outputs-file outputs.json \
            || (echo "::warning::Deployment failed, attempting cleanup..." && \
                npx cdk destroy -f -c stage=pr-${{ github.event.number }} && \
                exit 1)

      # Production Deploy
      - if: github.ref == 'refs/heads/main'
        name: Configure Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.PROD_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-prod-deploy
      - if: github.ref == 'refs/heads/main'
        run: cd infra && npx cdk deploy --require-approval never --exclusively -c stage=prod

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - run: npm install -g aws-cdk
      - run: cd infra && npm install
      - name: Destroy Preview
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.PR_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-cleanup-${{ github.event.pull_request.number }}
      - run: |
          echo "Destroying PR environment pr-${{ github.event.pull_request.number }}"
          cd infra
          npx cdk destroy -f -c stage=pr-${{ github.event.pull_request.number }} || \
            echo "::warning::Failed to destroy environment, it may need manual cleanup"
          exit 0
