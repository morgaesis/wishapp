name: CDK Deployment

on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - "infra/**"
      - ".github/workflows/deploy.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "infra/**"
      - ".github/workflows/deploy.yml"
  pull_request_target:
    types: [closed]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # Different AWS accounts for isolation
  PR_AWS_ACCOUNT_ID: ${{ secrets.PR_AWS_ACCOUNT_ID }}
  PROD_AWS_ACCOUNT_ID: ${{ secrets.PROD_AWS_ACCOUNT_ID }}
  # Shared role name across accounts
  DEPLOYMENT_ROLE_NAME: github-action

jobs:
  setup:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        id: assume-role
        with:
          role-to-assume: arn:aws:iam::${{ github.event_name == 'pull_request' && env.PR_AWS_ACCOUNT_ID || env.PROD_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          role-session-name: ${{ github.event_name == 'pull_request' && format('github-pr-{0}', github.event.number) || 'github-prod-deploy' }}
          aws-region: ${{ env.AWS_REGION }}
  deploy:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ github.event_name == 'pull_request' && env.PR_AWS_ACCOUNT_ID || env.PROD_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          role-session-name: ${{ github.event_name == 'pull_request' && format('github-pr-{0}', github.event.number) || 'github-prod-deploy' }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Install Zig toolchain
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.13.0
      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
      - name: Build lambda
        run: cargo lambda build --release --target x86_64-unknown-linux-musl
      - name: Force asset hash change
        run: date > target/lambda/wishlist_api/timestamp.txt
      - name: CDK Deploy
        run: |
          cd infra
          npm ci
          npx cdk deploy --require-approval never --exclusively

      - run: cd infra && npm test

      # PR Preview Environment
      - if: github.event_name == 'pull_request'
        name: Deploy Preview
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.PR_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-pr-${{ github.event.number }}
      - if: github.event_name == 'pull_request'
        run: |
          cd infra && npx cdk deploy \
            --require-approval never \
            --exclusively \
            -c stage=pr-${{ github.event.number }} \
            --outputs-file outputs.json \
            || (echo "::warning::Deployment failed, attempting cleanup..." && \
                npx cdk destroy -f -c stage=pr-${{ github.event.number }} && \
                exit 1)

      # Production Deploy
      - if: github.ref == 'refs/heads/main'
        name: Configure Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.PROD_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-prod-deploy
      - if: github.ref == 'refs/heads/main'
        run: cd infra && npx cdk deploy --require-approval never --exclusively -c stage=prod

  cleanup:
    if: github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.PR_AWS_ACCOUNT_ID }}:role/${{ env.DEPLOYMENT_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-cleanup-${{ github.event.pull_request.number }}
      - run: |
          echo "::group::Destroying PR environment pr-${{ github.event.pull_request.number }}"
          cd infra
          if ! npx cdk destroy -f -c stage=pr-${{ github.event.pull_request.number }}; then
            echo "::warning::Failed to destroy environment, it may need manual cleanup"
            exit 1
          fi
          echo "::endgroup::"
